// Code generated by github.com/pace/bricks DO NOT EDIT.
package securitytest

import (
	"context"
	errors1 "errors"
	sentry "github.com/getsentry/sentry-go"
	mux "github.com/gorilla/mux"
	oauth2 "github.com/pace/bricks/http/oauth2"
	apikey "github.com/pace/bricks/http/security/apikey"
	errors "github.com/pace/bricks/maintenance/errors"
	metrics "github.com/pace/bricks/maintenance/metric/jsonapi"
	"net/http"
)

type AuthorizationBackend interface {
	AuthorizeOAuth2(r *http.Request, w http.ResponseWriter, scope string) (context.Context, bool)
	InitOAuth2(cfgOAuth2 *oauth2.Config)
	CanAuthorizeOAuth2(r *http.Request) bool
	AuthorizeProfileKey(r *http.Request, w http.ResponseWriter) (context.Context, bool)
	InitProfileKey(cfgProfileKey *apikey.Config)
	CanAuthorizeProfileKey(r *http.Request) bool
}

var cfgOAuth2 = &oauth2.Config{
	AuthorizationCode: &oauth2.Flow{
		AuthorizationURL: "https://id.pace.cloud/oauth2/authorize",
		RefreshURL:       "https://id.pace.cloud/oauth2/token",
		Scopes:           map[string]string{"anything": "test"},
		TokenURL:         "https://id.pace.cloud/oauth2/token",
	},
	Description: "",
}
var cfgProfileKey = &apikey.Config{
	Description: "prefix with \"Bearer \"",
	In:          "header",
	Name:        "Authorization",
}

/*
GetTestHandler handles request/response marshaling and validation for

	Get /beta/test.
*/
func GetTestHandler(service GetTestHandlerService, authBackend AuthorizationBackend) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		defer errors.HandleRequest("GetTestHandler", w, r)

		// Trace the service function handler execution
		span := sentry.StartSpan(r.Context(), "http.server", sentry.WithDescription("GetTestHandler"))
		defer span.Finish()

		ctx := span.Context()
		r = r.WithContext(ctx)

		var ok bool
		if authBackend.CanAuthorizeOAuth2(r) {

			ctx, ok = authBackend.AuthorizeOAuth2(r, w, "anything")
			if !ok {
				return
			}
		} else if authBackend.CanAuthorizeProfileKey(r) {

			ctx, ok = authBackend.AuthorizeProfileKey(r, w)
			if !ok {
				return
			}
		} else {
			http.Error(w, "Authorization Error", http.StatusUnauthorized)
			return
		}

		// Setup context, response writer and request type
		writer := getTestResponseWriter{
			ResponseWriter: metrics.NewMetric("securitytest", "/beta/test", w, r),
		}
		request := GetTestRequest{
			Request: r,
		}

		// Scan and validate incoming request parameters

		// Invoke service that implements the business logic
		err := service.GetTest(ctx, &writer, &request)
		select {
		case <-ctx.Done():
			if ctx.Err() != nil {
				// Context cancellation should not be reported if it's the request context
				w.WriteHeader(499)
				if err != nil && !(errors1.Is(err, context.Canceled) || errors1.Is(err, context.DeadlineExceeded)) {
					// Report unclean error handling (err != context err) to sentry
					errors.Handle(ctx, err)
				}
			}
		default:
			if err != nil {
				errors.HandleError(err, "GetTestHandler", w, r)
			}
		}
	})
}

/*
GetTestResponseWriter is a standard http.ResponseWriter extended with methods
to generate the respective responses easily.
*/
type GetTestResponseWriter interface {
	http.ResponseWriter
	OK()
}
type getTestResponseWriter struct {
	http.ResponseWriter
}

// OK responds with empty response (HTTP code 200).
func (w *getTestResponseWriter) OK() {
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(200)
}

/*
GetTestRequest is a standard http.Request extended with the
un-marshaled content object.
*/
type GetTestRequest struct {
	Request *http.Request `valid:"-"`
}

// Service interface for GetTestHandler handler.
type GetTestHandlerService interface {
	// GetTest Test
	GetTest(context.Context, GetTestResponseWriter, *GetTestRequest) error
}

// Legacy Interface.
// Use this if you want to fully implement a service.
type Service interface {
	GetTestHandlerService
}

// GetTestHandlerWithFallbackHelper helper that checks if the given service fulfills the interface. Returns fallback handler if not, otherwise returns matching handler.
func GetTestHandlerWithFallbackHelper(service any, fallback http.Handler, authBackend AuthorizationBackend) http.Handler {
	if service, ok := service.(GetTestHandlerService); ok {
		return GetTestHandler(service, authBackend)
	} else {
		return fallback
	}
}

/*
Router implements: PACE Payment API

Welcome to the PACE Payment API documentation.
This API is responsible for managing payment methods for users as well as authorizing payments on behalf of PACE services.
*/
func Router(service interface{}, authBackend AuthorizationBackend) *mux.Router {
	router := mux.NewRouter()
	authBackend.InitOAuth2(cfgOAuth2)
	authBackend.InitProfileKey(cfgProfileKey)
	// Subrouter s1 - Path: /pay
	s1 := router.PathPrefix("/pay").Subrouter()
	s1.Methods("GET").Path("/beta/test").Name("GetTest").Handler(GetTestHandlerWithFallbackHelper(service, router.NotFoundHandler, authBackend))
	return router
}

/*
Router implements: PACE Payment API

Welcome to the PACE Payment API documentation.
This API is responsible for managing payment methods for users as well as authorizing payments on behalf of PACE services.
*/
func RouterWithFallback(service interface{}, authBackend AuthorizationBackend, fallback http.Handler) *mux.Router {
	router := mux.NewRouter()
	authBackend.InitOAuth2(cfgOAuth2)
	authBackend.InitProfileKey(cfgProfileKey)
	// Subrouter s1 - Path: /pay
	s1 := router.PathPrefix("/pay").Subrouter()
	s1.Methods("GET").Path("/beta/test").Name("GetTest").Handler(GetTestHandlerWithFallbackHelper(service, fallback, authBackend))
	return router
}
